# Generated by Django 5.0.1 on 2024-11-04 23:16

import django.db.models.deletion
import django_quill.fields
import results.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GenericTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lab', models.CharField(blank=True, choices=[('Chemical Pathology', 'Chemical Pathology'), ('Hematology', 'Hematology'), ('Microbiology', 'Microbiology'), ('Serology', 'Serology'), ('General', 'General')], max_length=300, null=True)),
                ('name', models.CharField(blank=True, max_length=1000, null=True, unique=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_no', results.models.SerialNumberField(blank=True, default='', editable=False, max_length=20)),
                ('surname', models.CharField(blank=True, max_length=300, null=True)),
                ('other_names', models.CharField(blank=True, max_length=300, null=True)),
                ('gender', models.CharField(blank=True, choices=[('MALE', 'MALE'), ('FEMALE', 'FEMALE')], max_length=100, null=True)),
                ('lab_no', models.CharField(blank=True, max_length=100, null=True)),
                ('clinical_diagnosis', models.CharField(blank=True, max_length=1000, null=True)),
                ('hospital_clinic', models.CharField(blank=True, max_length=1000, null=True, verbose_name='hospital/clinic')),
                ('age', models.IntegerField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=101, null=True, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date added')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Paypoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit', models.CharField(blank=True, max_length=1000, null=True)),
                ('service', models.CharField(blank=True, max_length=1000, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=100, null=True)),
                ('status', models.BooleanField(default=False)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateField(auto_now=True)),
                ('patient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patient_payments', to='results.patient')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GeneralTestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=100, null=True)),
                ('result_code', results.models.SerialNumberField(blank=True, default='', editable=False, max_length=20)),
                ('cleared', models.BooleanField(default=False)),
                ('result', django_quill.fields.QuillField(blank=True, null=True)),
                ('comments', models.CharField(blank=True, max_length=500, null=True)),
                ('nature_of_specimen', models.CharField(blank=True, max_length=1000, null=True)),
                ('collected', models.DateField(auto_now_add=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('collected_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='general_results_collected', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='general_results_reported', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='general_results', to='results.patient')),
                ('payment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='general_result_payment', to='results.paypoint')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(blank=True, choices=[('CHEMICAL PATHOLOGY', 'CHEMICAL PATHOLOGY'), ('HEMATOLOGY', 'HEMATOLOGY'), ('MICROBIOLOGY', 'MICROBIOLOGY'), ('SEROLOGY', 'SEROLOGY'), ('OTHER', 'OTHER')], max_length=300, null=True)),
                ('cadre', models.CharField(blank=True, choices=[('SCIENTIST', 'SCIENTIST'), ('TECHNICIAN', 'TECHNICIAN'), ('OTHER', 'OTHER')], max_length=300, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date added')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Testinfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(editable=False, max_length=20, unique=True)),
                ('cleared', models.BooleanField(default=False)),
                ('comments', models.CharField(blank=True, max_length=500, null=True)),
                ('nature_of_specimen', models.CharField(blank=True, max_length=1000, null=True)),
                ('collected', models.DateField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_tests', to=settings.AUTH_USER_MODEL)),
                ('collected_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collected_tests', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='test_info', to='results.patient')),
                ('payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='test_payments', to='results.paypoint')),
            ],
        ),
        migrations.CreateModel(
            name='Swab_Pus_Aspirate_MCS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('options', models.CharField(blank=True, choices=[('swab', 'swab'), ('pus', 'pus'), ('aspirate', 'aspirate')], max_length=20, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('no_growth', models.BooleanField(default=False)),
                ('e_coli', models.BooleanField(default=False)),
                ('coliform', models.BooleanField(default=False)),
                ('proteus', models.BooleanField(default=False)),
                ('staph_aureus', models.BooleanField(default=False)),
                ('pseudomonas', models.BooleanField(default=False)),
                ('streptococcus', models.BooleanField(default=False)),
                ('klebsiella', models.BooleanField(default=False)),
                ('salmonella', models.BooleanField(default=False)),
                ('str_feacalis', models.BooleanField(default=False)),
                ('shigella', models.BooleanField(default=False)),
                ('c_diphtheriae', models.BooleanField(default=False)),
                ('neisseria', models.BooleanField(default=False)),
                ('candida', models.BooleanField(default=False)),
                ('haemophilus', models.BooleanField(default=False)),
                ('str_pneumonia', models.BooleanField(default=False)),
                ('str_pyogenes', models.BooleanField(default=False)),
                ('staph_albus', models.BooleanField(default=False)),
                ('usual_flora', models.BooleanField(default=False)),
                ('cloxacillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ciprofloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('lincomycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('flucloxacillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('tetracycline', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ampicillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('erythromycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('roxithromycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('augmentin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cotrimoxazole', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cephalexin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('dalacin_c', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('gentamycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('streptomycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ceftriaxone', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('chloramphenicol', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('nitrofurantoin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('nalidixic_acid', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cefuroxime', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ceftazidime', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ofloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('pefloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='swab_pus_aspirate_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='Stool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consistency', models.CharField(blank=True, max_length=50, null=True)),
                ('color', models.CharField(blank=True, max_length=50, null=True)),
                ('mucus', models.CharField(blank=True, max_length=50, null=True)),
                ('blood', models.CharField(blank=True, max_length=50, null=True)),
                ('ova', models.CharField(blank=True, max_length=50, null=True)),
                ('cyst', models.CharField(blank=True, max_length=50, null=True)),
                ('no_growth', models.BooleanField(default=False)),
                ('e_coli', models.BooleanField(default=False)),
                ('coliform', models.BooleanField(default=False)),
                ('proteus', models.BooleanField(default=False)),
                ('staph_aureus', models.BooleanField(default=False)),
                ('pseudomonas', models.BooleanField(default=False)),
                ('streptococcus', models.BooleanField(default=False)),
                ('klebsiella', models.BooleanField(default=False)),
                ('salmonella', models.BooleanField(default=False)),
                ('str_feacalis', models.BooleanField(default=False)),
                ('shigella', models.BooleanField(default=False)),
                ('c_diphtheriae', models.BooleanField(default=False)),
                ('neisseria', models.BooleanField(default=False)),
                ('candida', models.BooleanField(default=False)),
                ('haemophilus', models.BooleanField(default=False)),
                ('str_pneumonia', models.BooleanField(default=False)),
                ('str_pyogenes', models.BooleanField(default=False)),
                ('staph_albus', models.BooleanField(default=False)),
                ('usual_flora', models.BooleanField(default=False)),
                ('cloxacillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ciprofloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('lincomycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('flucloxacillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('tetracycline', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ampicillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('erythromycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('roxithromycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('augmentin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cotrimoxazole', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cephalexin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('dalacin_c', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('gentamycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('streptomycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ceftriaxone', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('chloramphenicol', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('nitrofurantoin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('nalidixic_acid', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cefuroxime', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ceftazidime', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ofloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('pefloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stool_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='SputumMCS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(blank=True, choices=[('Positive', 'Positive'), ('Negative', 'Negative')], max_length=300, null=True)),
                ('no_growth', models.BooleanField(default=False)),
                ('e_coli', models.BooleanField(default=False)),
                ('coliform', models.BooleanField(default=False)),
                ('proteus', models.BooleanField(default=False)),
                ('staph_aureus', models.BooleanField(default=False)),
                ('pseudomonas', models.BooleanField(default=False)),
                ('streptococcus', models.BooleanField(default=False)),
                ('klebsiella', models.BooleanField(default=False)),
                ('salmonella', models.BooleanField(default=False)),
                ('str_feacalis', models.BooleanField(default=False)),
                ('shigella', models.BooleanField(default=False)),
                ('c_diphtheriae', models.BooleanField(default=False)),
                ('neisseria', models.BooleanField(default=False)),
                ('candida', models.BooleanField(default=False)),
                ('haemophilus', models.BooleanField(default=False)),
                ('str_pneumonia', models.BooleanField(default=False)),
                ('str_pyogenes', models.BooleanField(default=False)),
                ('staph_albus', models.BooleanField(default=False)),
                ('usual_flora', models.BooleanField(default=False)),
                ('cloxacillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ciprofloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('lincomycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('flucloxacillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('tetracycline', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ampicillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('erythromycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('roxithromycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('augmentin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cotrimoxazole', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cephalexin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('dalacin_c', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('gentamycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('streptomycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ceftriaxone', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('chloramphenicol', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('nitrofurantoin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('nalidixic_acid', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cefuroxime', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ceftazidime', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ofloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('pefloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sputum_mcs_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='SerumProteins',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('t_protein', models.CharField(help_text='Total Protein (g/dL)', max_length=10, null=True)),
                ('albumin', models.CharField(help_text='Albumin (g/dL)', max_length=10, null=True)),
                ('globulin', models.CharField(help_text='Globulin (g/dL)', max_length=10, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sp_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='SemenAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_produced', models.CharField(blank=True, max_length=200, null=True)),
                ('time_examined', models.CharField(blank=True, max_length=200, null=True)),
                ('color', models.CharField(blank=True, max_length=50, null=True)),
                ('volume', models.CharField(blank=True, help_text='Volume (ml)', max_length=10, null=True)),
                ('viscosity', models.CharField(blank=True, max_length=50, null=True)),
                ('consistency', models.CharField(blank=True, max_length=50, null=True)),
                ('motility_active', models.CharField(blank=True, help_text='Active Motility (%)', max_length=100, null=True)),
                ('motility_moderate', models.CharField(blank=True, help_text='Moderate Motility (%)', max_length=100, null=True)),
                ('motility_sluggish', models.CharField(blank=True, help_text='Sluggish Motility (%)', max_length=100, null=True)),
                ('morphology_normal', models.CharField(blank=True, help_text='Normal Morphology (%)', max_length=100, null=True)),
                ('morphology_abnormal', models.CharField(blank=True, help_text='Abnormal Morphology (%)', max_length=100, null=True)),
                ('total_sperm_count', models.CharField(blank=True, help_text='Total Sperm Count (x10^6/ml)', max_length=100, null=True)),
                ('no_growth', models.BooleanField(default=False)),
                ('e_coli', models.BooleanField(default=False)),
                ('coliform', models.BooleanField(default=False)),
                ('proteus', models.BooleanField(default=False)),
                ('staph_aureus', models.BooleanField(default=False)),
                ('pseudomonas', models.BooleanField(default=False)),
                ('streptococcus', models.BooleanField(default=False)),
                ('klebsiella', models.BooleanField(default=False)),
                ('salmonella', models.BooleanField(default=False)),
                ('str_feacalis', models.BooleanField(default=False)),
                ('shigella', models.BooleanField(default=False)),
                ('c_diphtheriae', models.BooleanField(default=False)),
                ('neisseria', models.BooleanField(default=False)),
                ('candida', models.BooleanField(default=False)),
                ('haemophilus', models.BooleanField(default=False)),
                ('str_pneumonia', models.BooleanField(default=False)),
                ('str_pyogenes', models.BooleanField(default=False)),
                ('staph_albus', models.BooleanField(default=False)),
                ('usual_flora', models.BooleanField(default=False)),
                ('cloxacillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ciprofloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('lincomycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('flucloxacillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('tetracycline', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ampicillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('erythromycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('roxithromycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('augmentin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cotrimoxazole', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cephalexin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('dalacin_c', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('gentamycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('streptomycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ceftriaxone', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('chloramphenicol', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('nitrofurantoin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('nalidixic_acid', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cefuroxime', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ceftazidime', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ofloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('pefloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='semen_analysis_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='RheumatoidFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(blank=True, max_length=100, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rheumatoid_factor_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='Pregnancy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(choices=[('Positive', 'Positive'), ('Negative ', 'Negative')], max_length=100, null=True)),
                ('method', models.CharField(choices=[('Urine', 'Urine Test'), ('Blood', 'Blood Test')], max_length=50, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pregnancy_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='OccultBlood',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(choices=[('Positive', 'Positive'), ('Negative', 'Negative')], max_length=30)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='occult_blood_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='MiscellaneousChempathTests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uric_acid', models.CharField(blank=True, help_text='Uric Acid (umol/L)', max_length=10, null=True)),
                ('serum_amylase', models.CharField(blank=True, help_text='Serum Amylase (U/L)', max_length=10, null=True)),
                ('acid_phosphatase_total', models.CharField(blank=True, help_text='Acid Phosphatase Total (U/L)', max_length=10, null=True)),
                ('acid_phosphatase_prostatic', models.CharField(blank=True, help_text='Acid Phosphatase Prostatic (U/L)', max_length=10, null=True)),
                ('psa', models.CharField(blank=True, help_text='Prostate Specific Antigen (PSA)', max_length=10, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='misc_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='Mantoux',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(blank=True, max_length=100, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mantoux_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='LiverFunction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alkaline_phosphatase', models.CharField(blank=True, max_length=100, null=True)),
                ('sgot', models.CharField(blank=True, max_length=100, null=True)),
                ('sgpt', models.CharField(blank=True, max_length=100, null=True)),
                ('gamma_gt', models.CharField(blank=True, max_length=100, null=True)),
                ('total_bilirubin', models.CharField(blank=True, max_length=100, null=True)),
                ('direct_bilirubin', models.CharField(blank=True, max_length=100, null=True)),
                ('t_protein', models.CharField(help_text='Total Protein (g/dL)', max_length=10, null=True)),
                ('albumin', models.CharField(help_text='Albumin (g/dL)', max_length=10, null=True)),
                ('globulin', models.CharField(help_text='Globulin (g/dL)', max_length=10, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lf_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='LipidProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cholesterol', models.CharField(blank=True, max_length=100, null=True)),
                ('triglyceride', models.CharField(blank=True, max_length=100, null=True)),
                ('hdl_cholesterol', models.CharField(blank=True, max_length=100, null=True)),
                ('ldl_cholesterol', models.CharField(blank=True, max_length=100, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lp_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='HVS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pus_cells', models.CharField(blank=True, max_length=50, null=True)),
                ('rbc', models.CharField(blank=True, max_length=50, null=True)),
                ('epithelial_cells', models.CharField(blank=True, max_length=50, null=True)),
                ('t_vaginalis', models.CharField(blank=True, max_length=50, null=True)),
                ('yeast_cells', models.CharField(blank=True, max_length=50, null=True)),
                ('no_growth', models.BooleanField(default=False)),
                ('e_coli', models.BooleanField(default=False)),
                ('coliform', models.BooleanField(default=False)),
                ('proteus', models.BooleanField(default=False)),
                ('staph_aureus', models.BooleanField(default=False)),
                ('pseudomonas', models.BooleanField(default=False)),
                ('streptococcus', models.BooleanField(default=False)),
                ('klebsiella', models.BooleanField(default=False)),
                ('salmonella', models.BooleanField(default=False)),
                ('str_feacalis', models.BooleanField(default=False)),
                ('shigella', models.BooleanField(default=False)),
                ('c_diphtheriae', models.BooleanField(default=False)),
                ('neisseria', models.BooleanField(default=False)),
                ('candida', models.BooleanField(default=False)),
                ('haemophilus', models.BooleanField(default=False)),
                ('str_pneumonia', models.BooleanField(default=False)),
                ('str_pyogenes', models.BooleanField(default=False)),
                ('staph_albus', models.BooleanField(default=False)),
                ('usual_flora', models.BooleanField(default=False)),
                ('cloxacillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ciprofloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('lincomycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('flucloxacillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('tetracycline', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ampicillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('erythromycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('roxithromycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('augmentin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cotrimoxazole', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cephalexin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('dalacin_c', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('gentamycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('streptomycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ceftriaxone', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('chloramphenicol', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('nitrofurantoin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('nalidixic_acid', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cefuroxime', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ceftazidime', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ofloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('pefloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hvs_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='HPB',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(blank=True, max_length=100, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hpb_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='HIVScreening',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(blank=True, max_length=100, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hiv_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='HCV',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(blank=True, max_length=100, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hcv_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='GramStain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('urine', models.BooleanField(default=False)),
                ('hvs', models.BooleanField(default=False, verbose_name='High Vaginal Swab')),
                ('swab', models.BooleanField(default=False)),
                ('pus', models.BooleanField(default=False)),
                ('aspirate', models.BooleanField(default=False)),
                ('sputum', models.BooleanField(default=False)),
                ('gram_positive_cocci', models.BooleanField(default=False)),
                ('gram_negative_cocci', models.BooleanField(default=False)),
                ('gram_positive_rods', models.BooleanField(default=False)),
                ('gram_negative_rods', models.BooleanField(default=False)),
                ('gram_positive_clusters', models.BooleanField(default=False)),
                ('gram_negative_clusters', models.BooleanField(default=False)),
                ('gram_positive_chains', models.BooleanField(default=False)),
                ('gram_negative_chains', models.BooleanField(default=False)),
                ('other_findings', models.CharField(blank=True, max_length=2000, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gram_stain_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='Genotype',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(choices=[('AA', 'AA'), ('AS', 'AS'), ('SS', 'SS'), ('AC', 'AC'), ('SC', 'SC')], max_length=2, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gt_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='FBC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hb', models.CharField(blank=True, max_length=10, null=True)),
                ('pcv', models.CharField(blank=True, max_length=10, null=True)),
                ('mchc', models.CharField(blank=True, max_length=10, null=True)),
                ('rbc', models.CharField(blank=True, max_length=10, null=True)),
                ('mch', models.CharField(blank=True, max_length=10, null=True)),
                ('mcv', models.CharField(blank=True, max_length=10, null=True)),
                ('retic', models.CharField(blank=True, max_length=10, null=True)),
                ('retic_index', models.CharField(blank=True, max_length=10, null=True)),
                ('platelets', models.CharField(blank=True, max_length=6, null=True)),
                ('wbc', models.CharField(blank=True, max_length=6, null=True)),
                ('esr', models.CharField(blank=True, max_length=6, null=True)),
                ('sickle_cells', models.CharField(blank=True, choices=[('+', '+'), ('++', '++'), ('+++', '+++'), ('None', 'None')], max_length=100, null=True)),
                ('hypochromia', models.CharField(blank=True, choices=[('+', '+'), ('++', '++'), ('+++', '+++'), ('None', 'None')], max_length=100, null=True)),
                ('polychromasia', models.CharField(blank=True, choices=[('+', '+'), ('++', '++'), ('+++', '+++'), ('None', 'None')], max_length=100, null=True)),
                ('nucleated_rbc', models.CharField(blank=True, choices=[('+', '+'), ('++', '++'), ('+++', '+++'), ('None', 'None')], max_length=100, null=True)),
                ('anisocytosis', models.CharField(blank=True, choices=[('+', '+'), ('++', '++'), ('+++', '+++'), ('None', 'None')], max_length=100, null=True)),
                ('macrocytosis', models.CharField(blank=True, choices=[('+', '+'), ('++', '++'), ('+++', '+++'), ('None', 'None')], max_length=100, null=True)),
                ('microcytosis', models.CharField(blank=True, choices=[('+', '+'), ('++', '++'), ('+++', '+++'), ('None', 'None')], max_length=100, null=True)),
                ('poikilocytosis', models.CharField(blank=True, choices=[('+', '+'), ('++', '++'), ('+++', '+++'), ('None', 'None')], max_length=100, null=True)),
                ('target_cells', models.CharField(blank=True, choices=[('+', '+'), ('++', '++'), ('+++', '+++'), ('None', 'None')], max_length=100, null=True)),
                ('neutrophils', models.CharField(blank=True, max_length=5, null=True)),
                ('eosinophils', models.CharField(blank=True, max_length=5, null=True)),
                ('basophils', models.CharField(blank=True, max_length=5, null=True)),
                ('trans_lymph', models.CharField(blank=True, max_length=10, null=True)),
                ('lymphocytes', models.CharField(blank=True, max_length=10, null=True)),
                ('monocytes', models.CharField(blank=True, max_length=10, null=True)),
                ('comment', models.CharField(blank=True, max_length=3000, null=True)),
                ('rbc_comments', models.CharField(blank=True, max_length=3000, null=True, verbose_name="RBC's")),
                ('wbc_comments', models.CharField(blank=True, max_length=3000, null=True, verbose_name="WBC's")),
                ('platelets_comments', models.CharField(blank=True, max_length=3000, null=True, verbose_name="Platelet's")),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fbc_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='CRP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(blank=True, max_length=100, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='crp_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='CerebroSpinalFluid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('csf_glucose', models.CharField(help_text='CSF Glucose (mmol/L)', max_length=10, null=True)),
                ('csf_protein', models.CharField(help_text='CSF Protein (mg/dL)', max_length=10, null=True)),
                ('csf_chloride', models.CharField(help_text='CSF Chloride (mmol/L)', max_length=10, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='csf_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='BoneChemistry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alkaline_phosphatase', models.CharField(help_text='Alkaline Phosphatase (U/L)', max_length=10, null=True)),
                ('calcium', models.CharField(help_text='Calcium (mmol/L)', max_length=10, null=True)),
                ('inorganic_phosphate', models.CharField(help_text='Inorganic Phosphate (mmol/L)', max_length=10, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bc_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='BloodGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=3, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bg_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='BloodGlucose',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_type', models.CharField(choices=[('FASTING', 'Fasting'), ('RANDOM', 'Random'), ('2HR_PP', '2 Hour Post Prandial')], max_length=100, null=True)),
                ('result', models.CharField(max_length=100, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bgl_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='BloodCulture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(blank=True, max_length=300, null=True)),
                ('no_growth', models.BooleanField(default=False)),
                ('e_coli', models.BooleanField(default=False)),
                ('coliform', models.BooleanField(default=False)),
                ('proteus', models.BooleanField(default=False)),
                ('staph_aureus', models.BooleanField(default=False)),
                ('pseudomonas', models.BooleanField(default=False)),
                ('streptococcus', models.BooleanField(default=False)),
                ('klebsiella', models.BooleanField(default=False)),
                ('salmonella', models.BooleanField(default=False)),
                ('str_feacalis', models.BooleanField(default=False)),
                ('shigella', models.BooleanField(default=False)),
                ('c_diphtheriae', models.BooleanField(default=False)),
                ('neisseria', models.BooleanField(default=False)),
                ('candida', models.BooleanField(default=False)),
                ('haemophilus', models.BooleanField(default=False)),
                ('str_pneumonia', models.BooleanField(default=False)),
                ('str_pyogenes', models.BooleanField(default=False)),
                ('staph_albus', models.BooleanField(default=False)),
                ('usual_flora', models.BooleanField(default=False)),
                ('cloxacillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ciprofloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('lincomycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('flucloxacillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('tetracycline', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ampicillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('erythromycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('roxithromycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('augmentin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cotrimoxazole', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cephalexin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('dalacin_c', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('gentamycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('streptomycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ceftriaxone', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('chloramphenicol', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('nitrofurantoin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('nalidixic_acid', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cefuroxime', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ceftazidime', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ofloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('pefloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='blood_culture_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='AsoTitre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(blank=True, max_length=100, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='aso_titre_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='UreaAndElectrolyte',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('urea', models.CharField(blank=True, max_length=100, null=True)),
                ('sodium', models.CharField(blank=True, max_length=100, null=True)),
                ('potassium', models.CharField(blank=True, max_length=100, null=True)),
                ('bicarbonate', models.CharField(blank=True, max_length=100, null=True)),
                ('chloride', models.CharField(blank=True, max_length=100, null=True)),
                ('creatinine', models.CharField(blank=True, max_length=100, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ue_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='Urinalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.CharField(blank=True, max_length=50, null=True)),
                ('appearance', models.CharField(blank=True, max_length=50, null=True)),
                ('specific_gravity', models.CharField(blank=True, max_length=5, null=True)),
                ('ph', models.CharField(blank=True, max_length=3, null=True)),
                ('protein', models.CharField(blank=True, max_length=50, null=True)),
                ('glucose', models.CharField(blank=True, max_length=50, null=True)),
                ('ketones', models.CharField(blank=True, max_length=50, null=True)),
                ('bilirubin', models.CharField(blank=True, max_length=50, null=True)),
                ('urobilinogen', models.CharField(blank=True, max_length=50, null=True)),
                ('nitrites', models.CharField(blank=True, max_length=50, null=True)),
                ('leukocyte_esterase', models.CharField(blank=True, max_length=50, null=True)),
                ('blood', models.CharField(blank=True, max_length=50, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='urinalysis_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='UrineMicroscopy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pus_cells', models.CharField(blank=True, max_length=50, null=True)),
                ('rbc', models.CharField(blank=True, max_length=50, null=True)),
                ('epithelial_cells', models.CharField(blank=True, max_length=50, null=True)),
                ('casts', models.CharField(blank=True, max_length=50, null=True)),
                ('crystals', models.CharField(blank=True, max_length=50, null=True)),
                ('ova', models.CharField(blank=True, max_length=50, null=True)),
                ('no_growth', models.BooleanField(default=False)),
                ('e_coli', models.BooleanField(default=False)),
                ('coliform', models.BooleanField(default=False)),
                ('proteus', models.BooleanField(default=False)),
                ('staph_aureus', models.BooleanField(default=False)),
                ('pseudomonas', models.BooleanField(default=False)),
                ('streptococcus', models.BooleanField(default=False)),
                ('klebsiella', models.BooleanField(default=False)),
                ('salmonella', models.BooleanField(default=False)),
                ('str_feacalis', models.BooleanField(default=False)),
                ('shigella', models.BooleanField(default=False)),
                ('c_diphtheriae', models.BooleanField(default=False)),
                ('neisseria', models.BooleanField(default=False)),
                ('candida', models.BooleanField(default=False)),
                ('haemophilus', models.BooleanField(default=False)),
                ('str_pneumonia', models.BooleanField(default=False)),
                ('str_pyogenes', models.BooleanField(default=False)),
                ('staph_albus', models.BooleanField(default=False)),
                ('usual_flora', models.BooleanField(default=False)),
                ('cloxacillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ciprofloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('lincomycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('flucloxacillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('tetracycline', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ampicillin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('erythromycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('roxithromycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('augmentin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cotrimoxazole', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cephalexin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('dalacin_c', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('gentamycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('streptomycin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ceftriaxone', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('chloramphenicol', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('nitrofurantoin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('nalidixic_acid', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('cefuroxime', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ceftazidime', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('ofloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('pefloxacin', models.CharField(blank=True, choices=[('s+', 's+'), ('s++', 's++'), ('s+++', 's+++'), ('R', 'R')], max_length=10, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='urine_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='VDRL',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(blank=True, max_length=100, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vdrl_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='Widal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('o_antigen_s_typhi_d', models.CharField(blank=True, max_length=100, null=True)),
                ('o_antigen_s_paratyphi_a', models.CharField(blank=True, max_length=100, null=True)),
                ('o_antigen_s_paratyphi_b', models.CharField(blank=True, max_length=100, null=True)),
                ('o_antigen_s_paratyphi_c', models.CharField(blank=True, max_length=100, null=True)),
                ('h_antigen_s_typhi_d', models.CharField(blank=True, max_length=100, null=True)),
                ('h_antigen_s_paratyphi_a', models.CharField(blank=True, max_length=100, null=True)),
                ('h_antigen_s_paratyphi_b', models.CharField(blank=True, max_length=100, null=True)),
                ('h_antigen_s_paratyphi_c', models.CharField(blank=True, max_length=100, null=True)),
                ('diagnostic_titre', models.CharField(blank=True, default='> 1/80', max_length=20, null=True)),
                ('malaria_parasite', models.CharField(blank=True, choices=[('seen +', 'seen +'), ('seen ++', 'seen ++'), ('seen +++', 'seen +++'), ('not seen', 'not seen')], max_length=100, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='widal_test', to='results.testinfo')),
            ],
        ),
        migrations.CreateModel(
            name='ZNStain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_sample', models.CharField(blank=True, choices=[('Positive', 'Positive'), ('Negative', 'Negative')], max_length=50, null=True)),
                ('second_sample', models.CharField(blank=True, choices=[('Positive', 'Positive'), ('Negative', 'Negative')], max_length=50, null=True)),
                ('third_sample', models.CharField(blank=True, choices=[('Positive', 'Positive'), ('Negative', 'Negative')], max_length=50, null=True)),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='results.generictest')),
                ('test_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='zn_stain_test', to='results.testinfo')),
            ],
        ),
    ]
